#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

typedef struct {
char items[MAX];
int top;
} Stack;

void initialize(Stack *s) {
s->top = -1;
}

int isFull(Stack *s) {
return s->top == MAX - 1;
}

int isEmpty(Stack *s) {
return s->top == -1;
}

void push(Stack *s, char value) {
if (!isFull(s)) {
    s->items[++s->top] = value;
}
}

char pop(Stack *s) {
if (!isEmpty(s)) {
return s->items[s->top--];
}
return '\0';
}

int isMatchingPair(char opening, char closing) {
return (opening == '(' && closing == ')') ||
(opening == '[' && closing == ']') ||
(opening == '{' && closing == '}');
}

int isValid(const char *s) {
Stack stack;
initialize(&stack);

for (int i = 0; s[i] != '\0'; i++) {
char current = s[i];
if (current == '(' || current == '[' || current == '{') {
push(&stack, current);
} else if (current == ')' || current == ']' || current == '}') {
if (isEmpty(&stack) || !isMatchingPair(pop(&stack), current)) {
return 0;
}
}
}
return isEmpty(&stack);
}

int main() {
char expression[MAX];

printf("Enter a string of parentheses: ");
fgets(expression, MAX, stdin);
expression[strcspn(expression, "\n")] = 0;

if (isValid(expression)) {
printf("The parentheses are valid.\n");
} else {
printf("The parentheses are not valid.\n");
}

return 0;
}
